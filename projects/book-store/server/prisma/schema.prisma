generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id           Int     @id @default(autoincrement())
  first_name   String? @db.VarChar(100)
  second_name  String? @db.VarChar(100)
  company_name String? @db.VarChar(100)
  books        Book[]

  @@index([first_name, second_name], name: "authors_ind_1")
  @@index([company_name], name: "authors_ind_2")
  @@map("authors")
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(100)
  books BookGenre[]

  @@map("genres")
}

model Publisher {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(100)
  books Book[]

  @@map("publishers")
}

model Book {
  isbn               String       @id @db.VarChar
  title              String       @db.VarChar(100)
  publication_date   DateTime?    @db.Date
  edition            Int?
  available_quantity Int          @default(0)
  price              Decimal?     @db.Decimal(6, 2)
  author_id          Int          @map("author")
  publisher_id       Int          @map("publisher")
  author             Author       @relation(fields: [author_id], references: [id], onDelete: Cascade)
  publisher          Publisher    @relation(fields: [publisher_id], references: [id], onDelete: Cascade)
  genres             BookGenre[]
  discounts          BookDiscount[]
  orders_details     OrderDetail[]
  reviews            Review[]

  @@map("books")
}

model BookGenre {
  book_id  String @db.VarChar
  genre_id Int
  book     Book   @relation(fields: [book_id], references: [isbn], onDelete: Cascade)
  genre    Genre  @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([book_id, genre_id])
  @@map("books_genres")
}

model Customer {
  id           Int      @id @default(autoincrement())
  first_name   String   @db.VarChar(100)
  last_name    String   @db.VarChar(100)
  login        String   @unique @db.VarChar(100)
  passwordHash String?  @db.VarChar(100)
  postal_code  String   @db.VarChar(6)
  street       String   @db.VarChar(100)
  building_no  String   @db.VarChar(5)
  flat_no      String?  @db.VarChar(5)
  city         String   @db.VarChar(100)
  nip          String?  @db.VarChar(10)
  phone_number String?  @db.VarChar(9)
  discounts    CustomerDiscount[]
  orders       Order[]
  reviews      Review[]

  @@map("customers")
}

model Shipper {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  phone_number String?  @db.VarChar(9)
  orders       Order[]

  @@map("shippers")
}

model Discount {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(100)
  value     Decimal? @default(0) @db.Decimal(2, 2)
  customers CustomerDiscount[]
  books     BookDiscount[]
  orders    Order[]

  @@map("discounts")
}

model CustomerDiscount {
  customer_id Int
  discount_id Int
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  discount    Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)

  @@id([customer_id, discount_id])
  @@map("customers_discounts")
}

model BookDiscount {
  book_id     String   @db.VarChar
  discount_id Int
  book        Book     @relation(fields: [book_id], references: [isbn], onDelete: Cascade)
  discount    Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)

  @@id([book_id, discount_id])
  @@map("books_discounts")
}

model Order {
  id           Int       @id @default(autoincrement())
  customer_id  Int
  date         DateTime? @default(now()) @db.Date
  discount_id  Int?
  shipper_id   Int       @map("shipper")
  state        String?   @default("AWAITING")
  customer     Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  discount     Discount? @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  shipper      Shipper   @relation(fields: [shipper_id], references: [id], onDelete: Cascade)
  orders_details OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  book_id  String @db.VarChar
  order_id Int
  amount   Int?
  book     Book   @relation(fields: [book_id], references: [isbn], onDelete: Cascade)
  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@id([book_id, order_id])
  @@map("orders_details")
}

model Review {
  id          Int       @id @default(autoincrement())
  book_id     String    @db.VarChar
  customer_id Int
  review      Int?
  date        DateTime? @default(now()) @db.Date
  book        Book      @relation(fields: [book_id], references: [isbn], onDelete: Cascade)
  customer    Customer  @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}